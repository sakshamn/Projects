# -*- coding: utf-8 -*-

# MainWindow implementation generated from reading ui file 'C:\Users\snayyar\Desktop\saksham.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


## Imports
from PyQt5 import QtCore, QtGui, QtWidgets
import sqlite3_functions as sql
from evaluate_team_window import Ui_Form
import random


## Global Constants
BAT = ["Virat Kohli", "Shikhar Dhawan", "Ajinkya Rahane", "Yuvraj Singh", "Rohit Sharma"]
BOW = ["Bhuvneshwar Kumar", "Umesh Yadav", "Jasprit Bumrah"]
AR = ["Kedar Jadhav", "Hardik Pandya", "Ravindra Jadeja", "Ravichandran Ashwin"]
WK = ["M.S. Dhoni", "Dinesh Kartik"]
MATCHES = ["IND_VS_NZ_ODI", "IND_VS_SA_ODI", "IND_VS_AUS_ODI", "IND_VS_SRI_ODI", "IND_VS_PAK_ODI"]

## My Exception Classes
POINTS_EXHAUSTED = type("MyPointsExhausted", (Exception,), {})
WICKETKEEPER = type("MyWicketKeeper", (Exception,), {})
TEAM_INCOMPLETE = type("MyTeamIncomplete", (Exception,), {})

## Create SQLITE3 Database connection
CONNECTION = sql.create_connection(r"C:\Users\snayyar\Desktop\TEMP\WORK\cricket.db")


class Ui_MainWindow(object):
    def create_evaluate_team_window(self) :
        """Open Evaluate Team Pop up Window.
        """
        ## Whatever is the type of the QtWidgets item is created in the evaluate_team_window
        ## module, shall be instantiated here. So, it is QtWidgets.QWidget().
        ## To know the type, look for the same in __name__ == "__main__" code.
        self.form = QtWidgets.QWidget()
        self.ui = Ui_Form()
        self.ui.setupUi(self.form)


    def evaluate_team_popup(self) :
        """Open Evaluate Team Pop up Window.
        """
        ## call the evaluate_team_window to run as popup.
        self.form.show()


    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(654, 594)
        MainWindow.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"selection-color: rgb(0, 0, 0);\n"
"selection-background-color: rgb(138, 226, 245);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.frame.sizePolicy().hasHeightForWidth())
        self.frame.setSizePolicy(sizePolicy)
        self.frame.setMaximumSize(QtCore.QSize(100000, 100))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(226, 226, 226))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(226, 226, 226))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(226, 226, 226))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(138, 226, 245))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Highlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.HighlightedText, brush)
        brush = QtGui.QBrush(QtGui.QColor(226, 226, 226))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(226, 226, 226))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(226, 226, 226))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(138, 226, 245))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Highlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.HighlightedText, brush)
        brush = QtGui.QBrush(QtGui.QColor(226, 226, 226))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(226, 226, 226))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(226, 226, 226))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(138, 226, 245))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Highlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.HighlightedText, brush)
        self.frame.setPalette(palette)
        self.frame.setStyleSheet("background-color: rgb(226, 226, 226);")
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.frame)
        self.verticalLayout.setObjectName("verticalLayout")
        self.label = QtWidgets.QLabel(self.frame)
        self.label.setObjectName("label")
        self.verticalLayout.addWidget(self.label)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setSizeConstraint(QtWidgets.QLayout.SetFixedSize)
        self.horizontalLayout.setSpacing(6)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.label_2 = QtWidgets.QLabel(self.frame)
        self.label_2.setObjectName("label_2")
        self.horizontalLayout.addWidget(self.label_2)
        ## Radiobutton to select Batsmen in Available Players' List
        self.lab_BAT = QtWidgets.QLabel(self.frame)
        self.lab_BAT.setObjectName("lab_BAT")
        self.horizontalLayout.addWidget(self.lab_BAT)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem)
        self.label_3 = QtWidgets.QLabel(self.frame)
        self.label_3.setObjectName("label_3")
        self.horizontalLayout.addWidget(self.label_3)
        ## Radiobutton to select Bowlers in Available Players' List
        self.lab_BOW = QtWidgets.QLabel(self.frame)
        self.lab_BOW.setObjectName("lab_BOW")
        self.horizontalLayout.addWidget(self.lab_BOW)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem1)
        self.label_9 = QtWidgets.QLabel(self.frame)
        self.label_9.setObjectName("label_9")
        self.horizontalLayout.addWidget(self.label_9)
        ## Radiobutton to select AllRounders in Available Players' List
        self.lab_AR = QtWidgets.QLabel(self.frame)
        self.lab_AR.setObjectName("lab_AR")
        self.horizontalLayout.addWidget(self.lab_AR)
        spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem2)
        self.label_4 = QtWidgets.QLabel(self.frame)
        self.label_4.setObjectName("label_4")
        self.horizontalLayout.addWidget(self.label_4)
        ## Radiobutton to select WicketKeepers in Available Players' List
        self.lab_WK = QtWidgets.QLabel(self.frame)
        self.lab_WK.setObjectName("lab_WK")
        self.horizontalLayout.addWidget(self.lab_WK)
        self.verticalLayout.addLayout(self.horizontalLayout)
        self.verticalLayout_3.addWidget(self.frame)
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.label_11 = QtWidgets.QLabel(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_11.sizePolicy().hasHeightForWidth())
        self.label_11.setSizePolicy(sizePolicy)
        self.label_11.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_11.setIndent(-1)
        self.label_11.setObjectName("label_11")
        self.horizontalLayout_5.addWidget(self.label_11)
        self.lab_points_available = QtWidgets.QLabel(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lab_points_available.sizePolicy().hasHeightForWidth())
        self.lab_points_available.setSizePolicy(sizePolicy)
        self.lab_points_available.setObjectName("lab_points_available")
        self.horizontalLayout_5.addWidget(self.lab_points_available)
        self.verticalLayout_2.addLayout(self.horizontalLayout_5)
        self.frame1 = QtWidgets.QFrame(self.centralwidget)
        self.frame1.setFrameShape(QtWidgets.QFrame.Box)
        self.frame1.setObjectName("frame1")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout(self.frame1)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.rb_BAT = QtWidgets.QRadioButton(self.frame1)
        self.rb_BAT.setObjectName("rb_BAT")
        self.radioButtonGroup = QtWidgets.QButtonGroup(MainWindow)
        self.radioButtonGroup.setObjectName("radioButtonGroup")
        self.radioButtonGroup.addButton(self.rb_BAT)
        self.horizontalLayout_7.addWidget(self.rb_BAT)
        self.rb_BOW = QtWidgets.QRadioButton(self.frame1)
        self.rb_BOW.setObjectName("rb_BOW")
        self.radioButtonGroup.addButton(self.rb_BOW)
        self.horizontalLayout_7.addWidget(self.rb_BOW)
        self.rb_AR = QtWidgets.QRadioButton(self.frame1)
        self.rb_AR.setObjectName("rb_AR")
        self.radioButtonGroup.addButton(self.rb_AR)
        self.horizontalLayout_7.addWidget(self.rb_AR)
        self.rb_WK = QtWidgets.QRadioButton(self.frame1)
        self.rb_WK.setObjectName("rb_WK")
        self.radioButtonGroup.addButton(self.rb_WK)
        self.horizontalLayout_7.addWidget(self.rb_WK)
        self.verticalLayout_6.addLayout(self.horizontalLayout_7)
        self.list_available_players = QtWidgets.QListWidget(self.frame1)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.list_available_players.sizePolicy().hasHeightForWidth())
        self.list_available_players.setSizePolicy(sizePolicy)
        self.list_available_players.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.list_available_players.setFrameShadow(QtWidgets.QFrame.Plain)
        self.list_available_players.setObjectName("list_available_players")
        self.verticalLayout_6.addWidget(self.list_available_players)
        self.verticalLayout_2.addWidget(self.frame1)
        self.horizontalLayout_6.addLayout(self.verticalLayout_2)
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_5.sizePolicy().hasHeightForWidth())
        self.label_5.setSizePolicy(sizePolicy)
        self.label_5.setMaximumSize(QtCore.QSize(10000, 100))
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.label_5.setFont(font)
        self.label_5.setAlignment(QtCore.Qt.AlignCenter)
        self.label_5.setObjectName("label_5")
        self.horizontalLayout_6.addWidget(self.label_5)
        self.verticalLayout_4 = QtWidgets.QVBoxLayout()
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.horizontalLayout_9 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_9.setObjectName("horizontalLayout_9")
        self.label_12 = QtWidgets.QLabel(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_12.sizePolicy().hasHeightForWidth())
        self.label_12.setSizePolicy(sizePolicy)
        self.label_12.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.label_12.setIndent(-1)
        self.label_12.setObjectName("label_12")
        self.horizontalLayout_9.addWidget(self.label_12)
        self.lab_points_used = QtWidgets.QLabel(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lab_points_used.sizePolicy().hasHeightForWidth())
        self.lab_points_used.setSizePolicy(sizePolicy)
        self.lab_points_used.setObjectName("lab_points_used")
        self.horizontalLayout_9.addWidget(self.lab_points_used)
        self.verticalLayout_4.addLayout(self.horizontalLayout_9)
        self.frame2 = QtWidgets.QFrame(self.centralwidget)
        self.frame2.setFrameShape(QtWidgets.QFrame.Box)
        self.frame2.setObjectName("frame2")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.frame2)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.horizontalLayout_8 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_8.setObjectName("horizontalLayout_8")
        self.label_13 = QtWidgets.QLabel(self.frame2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_13.sizePolicy().hasHeightForWidth())
        self.label_13.setSizePolicy(sizePolicy)
        self.label_13.setObjectName("label_13")
        self.horizontalLayout_8.addWidget(self.label_13)
        spacerItem3 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_8.addItem(spacerItem3)
        self.lab_TEAM = QtWidgets.QLabel(self.frame2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lab_TEAM.sizePolicy().hasHeightForWidth())
        self.lab_TEAM.setSizePolicy(sizePolicy)
        self.lab_TEAM.setObjectName("lab_TEAM")
        self.horizontalLayout_8.addWidget(self.lab_TEAM)
        self.verticalLayout_5.addLayout(self.horizontalLayout_8)
        self.list_selected_players = QtWidgets.QListWidget(self.frame2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.list_selected_players.sizePolicy().hasHeightForWidth())
        self.list_selected_players.setSizePolicy(sizePolicy)
        self.list_selected_players.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.list_selected_players.setFrameShadow(QtWidgets.QFrame.Plain)
        self.list_selected_players.setObjectName("list_selected_players")
        self.verticalLayout_5.addWidget(self.list_selected_players)
        self.verticalLayout_4.addWidget(self.frame2)
        self.horizontalLayout_6.addLayout(self.verticalLayout_4)
        self.verticalLayout_3.addLayout(self.horizontalLayout_6)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 654, 22))
        self.menubar.setObjectName("menubar")
        self.menuManage_Teams = QtWidgets.QMenu(self.menubar)
        self.menuManage_Teams.setObjectName("menuManage_Teams")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionNEW_Team = QtWidgets.QAction(MainWindow)
        self.actionNEW_Team.setObjectName("actionNEW_Team")
        self.actionOPEN_Team = QtWidgets.QAction(MainWindow)
        self.actionOPEN_Team.setObjectName("actionOPEN_Team")
        self.actionSAVE_Team = QtWidgets.QAction(MainWindow)
        self.actionSAVE_Team.setObjectName("actionSAVE_Team")
        self.actionEVALUATE_Team = QtWidgets.QAction(MainWindow)
        self.actionEVALUATE_Team.setObjectName("actionEVALUATE_Team")
        self.menuManage_Teams.addAction(self.actionNEW_Team)
        self.menuManage_Teams.addAction(self.actionOPEN_Team)
        self.menuManage_Teams.addAction(self.actionSAVE_Team)
        self.menuManage_Teams.addAction(self.actionEVALUATE_Team)
        self.menubar.addAction(self.menuManage_Teams.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        ## List Widget for Available Players (under Points Available) Playing Role Wise.
        self.list_available_players.itemDoubleClicked.connect(self.removeList_available_players)

        ## List Widget for Selected Players (under Points Used) Playing Role Wise.
        self.list_selected_players.itemDoubleClicked.connect(self.removeList_selected_players)


        ## Select the slots for the QAction items from QMenu - Manage Teams.
        self.menuManage_Teams.triggered[QtWidgets.QAction].connect(self.manage_teams)

        ## Until a New Team is created, we shall not allow clicking of RadioButtons.
        self.rb_BAT.setCheckable(False)
        self.rb_BOW.setCheckable(False)
        self.rb_AR.setCheckable(False)
        self.rb_WK.setCheckable(False)

        ##Connect the Radiobuttons for Available Players Categories to their resp. slots.
        self.rb_BAT.toggled.connect(self.rb_BAT_list)
        self.rb_BOW.toggled.connect(self.rb_BOW_list)
        self.rb_AR.toggled.connect(self.rb_AR_list)
        self.rb_WK.toggled.connect(self.rb_WK_list)

        self.create_evaluate_team_window() ## To create popup window for evaluate_team task.
        ## Connect Calculate Score button in evaluate_team_window Ui_Form.
        self.ui.btn_calculate_score.clicked.connect(self.calculate_team_match_score)


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Fantasy Cricket Game"))
        self.label.setText(_translate("MainWindow", "Your Selections"))
        self.label_2.setText(_translate("MainWindow", "Batsmen (BAT)"))
        self.lab_BAT.setText(_translate("MainWindow", "##"))
        self.label_3.setText(_translate("MainWindow", "Bowler (BOW)"))
        self.lab_BOW.setText(_translate("MainWindow", "##"))
        self.label_9.setText(_translate("MainWindow", "All-Rounder (AR)"))
        self.lab_AR.setText(_translate("MainWindow", "##"))
        self.label_4.setText(_translate("MainWindow", "Wicket-Keeper (WK)"))
        self.lab_WK.setText(_translate("MainWindow", "##"))
        self.label_11.setText(_translate("MainWindow", "Points Available"))
        self.lab_points_available.setText(_translate("MainWindow", "####"))
        self.rb_BAT.setText(_translate("MainWindow", "BAT"))
        self.rb_BOW.setText(_translate("MainWindow", "BOW"))
        self.rb_AR.setText(_translate("MainWindow", "AR"))
        self.rb_WK.setText(_translate("MainWindow", "WK"))
        self.label_5.setText(_translate("MainWindow", ">"))
        self.label_12.setText(_translate("MainWindow", "Points Used"))
        self.lab_points_used.setText(_translate("MainWindow", "####"))
        self.label_13.setText(_translate("MainWindow", "Team Name"))
        self.lab_TEAM.setText(_translate("MainWindow", "Displayed Here"))
        self.menuManage_Teams.setTitle(_translate("MainWindow", "Manage Teams"))
        self.actionNEW_Team.setText(_translate("MainWindow", "NEW Team"))
        self.actionNEW_Team.setShortcut(_translate("MainWindow", "Ctrl+N"))
        self.actionOPEN_Team.setText(_translate("MainWindow", "OPEN Team"))
        self.actionOPEN_Team.setShortcut(_translate("MainWindow", "Ctrl+O"))
        self.actionSAVE_Team.setText(_translate("MainWindow", "SAVE Team"))
        self.actionSAVE_Team.setShortcut(_translate("MainWindow", "Ctrl+S"))
        self.actionEVALUATE_Team.setText(_translate("MainWindow", "EVALUATE Team"))
        self.actionEVALUATE_Team.setShortcut(_translate("MainWindow", "Ctrl+E"))


    def manage_teams(self, action) :
        """Select one of the many QActions for the QMenu - menuManage_Teams.
        """
        _txt = (action.text())
        if _txt == "NEW Team" :
            self.create_team()
        elif _txt == "OPEN Team" :
            self.open_team()
        elif _txt == "SAVE Team" :
            self.save_team()
        elif _txt == "EVALUATE Team" :
            self.evaluate_team()


    def create_team(self) :
        """Create a new team when the NEW TEAM QAction is pressed.

        Show a popup asking for team name input.
        Also, display all the players categorywise in the available players listwidget.
        """
        ## Give self.centralwidget as the 1st argument as it is the instance of the QWidget.
        _dialog = QtWidgets.QInputDialog(self.centralwidget)
        _dialog.setInputMode(QtWidgets.QInputDialog.TextInput)
        _dialog.setWindowTitle("NAME YOUR TEAM")
        _dialog.setLabelText("Enter the name of your team.")
        _dialog.resize(400,400)
        _result = _dialog.exec_()
        self._team_name = _dialog.textValue()

        if _result == True :
            if self.check_team_existence() :
                self.message_box(f"""Team "{self._team_name}" already exists.""", "Error")
                return
            self.lab_TEAM.setText(self._team_name)
            self.create_display_values()


    def open_team(self) :
        """Load/Open an existing team when the OPEN TEAM QAction is pressed.

        Show a popup asking for team name input.
        Get all the variable values and statuses from database and display/update them.
        Display all the players categorywise in the available/selected players listwidgets.
        """
        ## Give self.centralwidget as the 1st argument as it is the instance of the QWidget.
        _dialog = QtWidgets.QInputDialog(self.centralwidget)
        _dialog.setInputMode(QtWidgets.QInputDialog.TextInput)
        _dialog.setWindowTitle("ENTER TEAM NAME")
        _dialog.setLabelText("Enter the name of your team.")
        _dialog.resize(400,400)
        _result = _dialog.exec_()
        self._team_name = _dialog.textValue()

        if not self.check_team_existence() :
            self.message_box(f"""Team "{self._team_name}" doesn't exist.""", "Error")
            return
        self.lab_TEAM.setText(self._team_name)
        self.create_display_values()


    def save_team(self) :
        """Save a newly created team when the SAVE TEAM QAction is pressed.

        Get all the variable values and their status & store them in database.
        We shall not create a single table for all teams. Rather each team shall be a
        different table so that we do not have to store all the players' names in 1 field.
        """
        _total_players = 0
        for _ctg in self._selected_dict :   ## Categories BAT, BOW, AR, WK
            if self._selected_dict[_ctg] == [] :
                self.message_box("Choose atleast one Player from each Category.", "Error")
                return
            else :
                _total_players += len(self._selected_dict[_ctg])

        if _total_players < 11 :
            self.message_box("Team must contain 11 Players.", "Error")
            return

        ## Delete the table to remove old values completely.
        _query = f"""
        DROP TABLE
            {self._team_name}
        """
        sql.execute_query(CONNECTION, _query)

        _attributes = {    
            1 : "NAME TEXT UNIQUE PRIMARY KEY,",
            ## Role - BAT, BOW, AR, WK
            2 : "ROLE TEXT NOT NULL,",
            ## Value means the Points to be spent when we are selecting the player in our team
            3 : "VALUE INTEGER NOT NULL"
        }
        sql.create_table(CONNECTION, self._team_name, _attributes)

        _fields = "(NAME, ROLE, VALUE)"
        _values = ""

        for _role in self._selected_dict :   ## Categories BAT, BOW, AR, WK
            ## Players selected for each category.
            ## Sort this list so that player names in database are stored in sorted order.
            for _name in sorted(self._selected_dict[_role]) :
                _value = self.get_player_value(_name)
                _values += f"""("{_name}", "{_role}", {_value}),\n\t"""

        _values = _values.rstrip(",\n\t")

        sql.create_record(CONNECTION, self._team_name, _fields, _values)

        ## Add the new team to the TEAMS table in database.
        _attributes = {    
            ## Team's Name who is selected in the team
            1 : "NAME TEXT PRIMARY KEY"
        }
        sql.create_table(CONNECTION, "TEAMS", _attributes)

        _fields = "(NAME)"
        _values = f"""
        ("{self._team_name}")
        """

        sql.create_record(CONNECTION, "TEAMS", _fields, _values)


        self.message_box(f"""Team "{self._team_name}" is saved in the records Successfully!""", "Info")


    def evaluate_team(self) :
        """Open the Evaluate Team Window to calculate the scores for a team & match.
        """
        ## Create Match records in database using random match stats.
        self.evaluate_team_popup()

        _get_teams_list = """
        SELECT
            NAME
        FROM
            TEAMS
        """
        _teams_list = sql.execute_read_query(CONNECTION, _get_teams_list)

        ## Reset the list of teams as calling evaluate_team twice causes appending same list
        ## again.
        self.ui.comboBox_team.clear()
        ## Add the team name to evaluate_team_window team comboBox.
        for _team in _teams_list :
            ## _teams_list is a list of tuples. So extract tuple's 1st element.
            self.ui.add_team(_team[0])


    def create_display_values(self) :
        """Create a list of available players for each category for a Team.

        Reset the available player's list with the team's list.
        Also, set Checkable property of Radio Buttons to True after New Team is created.
        """
        ## Only when a New Team is created, we shall allow clicking of RadioButtons.
        self.rb_BAT.setCheckable(True)
        self.rb_BOW.setCheckable(True)
        self.rb_AR.setCheckable(True)
        self.rb_WK.setCheckable(True)

        ## Start with default points. Change if team already exists as per the database.
        self._points_available = 1000
        self._points_used = 0

        ## Reset Dictionaries
        self._available_dict = {
            "BAT" : [],
            "BOW" : [],
            "AR"  : [],
            "WK"  : []
        }
        self._selected_dict = {
            "BAT" : [],
            "BOW" : [],
            "AR"  : [],
            "WK"  : []
        }

        ## If team already exists then this function must have been called from open_team
        ## function. So, we need to display values retreived from the database.
        ## Otherwise, if its called from create_team, then create display from default values.
        if self.check_team_existence() :
            ## Initialise the Selected Players Dict for respective categories.
            for _ctg in self._selected_dict :
                _get_values_categorywise = f"""
                SELECT
                    *
                FROM
                    {self._team_name}
                WHERE
                    ROLE = "{_ctg}"
                """
                ## Query returns a list of tuples.
                _list = sql.execute_read_query(CONNECTION, _get_values_categorywise)
                for _item in _list :
                    _name, _role, _value = _item
                    self._selected_dict[_ctg].append(_name)
                    self._points_available -= _value
                    self._points_used += _value

            ## Initialise the Available Players Dict for respective categories.
            self._available_dict["BAT"] = list(set(BAT) - set(self._selected_dict["BAT"]))
            self._available_dict["BOW"] = list(set(BOW) - set(self._selected_dict["BOW"]))
            self._available_dict["AR"] = list(set(AR) - set(self._selected_dict["AR"]))
            self._available_dict["WK"] = list(set(WK) - set(self._selected_dict["WK"]))

            self._lab_BAT_count = len(self._selected_dict["BAT"])
            self._lab_BOW_count = len(self._selected_dict["BOW"])
            self._lab_AR_count = len(self._selected_dict["AR"])
            self._lab_WK_count = len(self._selected_dict["WK"])

        else :  ## If team_name table is not created. This is a new team.
            ## Copy the lists not assign directly.
            self._available_dict["BAT"] = list(BAT)
            self._available_dict["BOW"] = list(BOW)
            self._available_dict["AR"] = list(AR)
            self._available_dict["WK"] = list(WK)
            self._selected_dict["BAT"] = []
            self._selected_dict["BOW"] = []
            self._selected_dict["AR"] = []
            self._selected_dict["WK"] = []

            self._lab_BAT_count = 0
            self._lab_BOW_count = 0
            self._lab_AR_count = 0
            self._lab_WK_count = 0

        ## Reset the points used.
        self.lab_points_available.setText(str(self._points_available))
        self.lab_points_used.setText(str(self._points_used))

        ## Reset Label values for all categories - BAT, BOW, AR & WK
        self.lab_BAT.setText(str(self._lab_BAT_count))
        self.lab_BOW.setText(str(self._lab_BOW_count))
        self.lab_AR.setText(str(self._lab_AR_count))
        self.lab_WK.setText(str(self._lab_WK_count))

        self.selected_players_list()    ## update selected players list.
        ## When creating a New Team again, BAT category shall be selected & displayed first.
        self.rb_BAT.setChecked(True)
        self.rb_BAT_list()


    def selected_players_list(self) :
        """Create, hide, update & display the list of selected players.
        """
        self.list_selected_players.clear()
        self.list_selected_players.addItems(self._selected_dict["BAT"] + self._selected_dict["BOW"] + self._selected_dict["AR"] + self._selected_dict["WK"])
        self.list_selected_players.sortItems()


    def rb_BAT_list(self) :
        """Create, hide, update & display the list of available Batsmen when rb_BAT is toggled.
        """
        self.list_available_players.clear()
        self.list_available_players.addItems(self._available_dict["BAT"])
        self.list_available_players.sortItems()


    def rb_BOW_list(self) :
        """Create, hide, update & display the list of available Bowlers when rb_BOW is toggled.
        """
        self.list_available_players.clear()
        self.list_available_players.addItems(self._available_dict["BOW"])
        self.list_available_players.sortItems()


    def rb_AR_list(self) :
        """Create, hide, update & display the list of available AllRounders when rb_AR is toggled.
        """
        self.list_available_players.clear()
        self.list_available_players.addItems(self._available_dict["AR"])
        self.list_available_players.sortItems()


    def rb_WK_list(self) :
        """Create, hide, update & display the list of available WicketKeepers when rb_WK is toggled.
        """
        self.list_available_players.clear()
        self.list_available_players.addItems(self._available_dict["WK"])
        self.list_available_players.sortItems()


    def removeList_available_players(self, item) :
        """Select & Remove item from list_available_players and Add it to list_selected_players.

        The idea is to select & remove an item from list_available_players and add it to list_selected_players when
        itemDoubleClicked signal is emitted by QListWidget widget by connecting to this
        method as its slot.
        The QListWidgetItem on which the double click event is performed, is sent as an
        argument to this method automatically. i.e., We do not have to explicitly pass value
        to item.
        Its text() method retrieves the string from the selected item which is selected from
        list_available_players and added to list_selected_players by this method.
        """
        ## Update the corresponding lists.
        try :
            _points = self.get_player_value(item.text())
            if self._points_available - _points < 0 :
                raise POINTS_EXHAUSTED

            if self.rb_BAT.isChecked() == True :
                self._available_dict["BAT"].remove(item.text())
                self._selected_dict["BAT"].append(item.text())
                ## Update categorywise count of the players that are selected. 
                self._lab_BAT_count += 1
                self.lab_BAT.setText(str(self._lab_BAT_count))
            elif self.rb_BOW.isChecked() == True :
                self._available_dict["BOW"].remove(item.text())
                self._selected_dict["BOW"].append(item.text())
                ## Update categorywise count of the players that are selected. 
                self._lab_BOW_count += 1
                self.lab_BOW.setText(str(self._lab_BOW_count))
            elif self.rb_AR.isChecked() == True :
                self._available_dict["AR"].remove(item.text())
                self._selected_dict["AR"].append(item.text())
                ## Update categorywise count of the players that are selected. 
                self._lab_AR_count += 1
                self.lab_AR.setText(str(self._lab_AR_count))
            elif self.rb_WK.isChecked() == True :
                if self._lab_WK_count == 1 :    ## Put this before all checks.
                    raise WICKETKEEPER
                self._available_dict["WK"].remove(item.text())
                self._selected_dict["WK"].append(item.text())
                ## Update categorywise count of the players that are selected. 
                self._lab_WK_count += 1
                self.lab_WK.setText(str(self._lab_WK_count))

            ## Do this at last because we want to check WICKETKEEPER before updating the 
            ## following when points are still available and POINTS_EXHAUSTED is not raised.
            self._points_available -= _points
            self._points_used += _points
            ## Update QListWidget points available & used.
            self.lab_points_available.setText(str(self._points_available))
            self.lab_points_used.setText(str(self._points_used))

        except ValueError :
            self.message_box("Choose the Correct Category for the player first.", "Error")
        except POINTS_EXHAUSTED :
            self.message_box("You do not have enough points available to choose a new player.", "Error")
        except WICKETKEEPER :
            self.message_box("You can not choose more than 1 wicket-keeper.", "Error")
        else :
            self.list_available_players.takeItem(self.list_available_players.row(item))
            self.list_selected_players.addItem(item.text())

            self.list_available_players.sortItems()
            self.list_selected_players.sortItems()
                

    def removeList_selected_players(self, item) :
        """Select & Remove item from list_selected_players and Add it to list_available_players.

        The idea is to select & remove an item from list_selected_players and add it to list_available_players when
        itemDoubleClicked signal is emitted by QListWidget widget by connecting to this
        method as its slot.
        The QListWidgetItem on which the double click event is performed, is sent as an
        argument to this method automatically. i.e., We do not have to explicitly pass value
        to item.
        Its text() method retrieves the string from the selected item which is selected from
        list_selected_players and added to list_available_players by this method.
        """
        ## Update the corresponding lists.
        try :
            _points = self.get_player_value(item.text())

            if self.rb_BAT.isChecked() == True :
                self._selected_dict["BAT"].remove(item.text())
                self._available_dict["BAT"].append(item.text())
                ## Update categorywise count of the players that are selected. 
                self._lab_BAT_count -= 1
                self.lab_BAT.setText(str(self._lab_BAT_count))
            elif self.rb_BOW.isChecked() == True :
                self._selected_dict["BOW"].remove(item.text())
                self._available_dict["BOW"].append(item.text())
                ## Update categorywise count of the players that are selected. 
                self._lab_BOW_count -= 1
                self.lab_BOW.setText(str(self._lab_BOW_count))
            elif self.rb_AR.isChecked() == True :
                self._selected_dict["AR"].remove(item.text())
                self._available_dict["AR"].append(item.text())
                ## Update categorywise count of the players that are selected. 
                self._lab_AR_count -= 1
                self.lab_AR.setText(str(self._lab_AR_count))
            elif self.rb_WK.isChecked() == True :
                self._selected_dict["WK"].remove(item.text())
                self._available_dict["WK"].append(item.text())
                ## Update categorywise count of the players that are selected. 
                self._lab_WK_count -= 1
                self.lab_WK.setText(str(self._lab_WK_count))

            ## Update QListWidget points available & used.
            ## Do it at last so that if ValueError exception occurs then points shall not be
            ## deducted.
            self._points_used -= _points
            self._points_available += _points
            self.lab_points_available.setText(str(self._points_available))
            self.lab_points_used.setText(str(self._points_used))

        except ValueError :
            self.message_box("Choose the Correct Category for the player first.", "Error")
        else :
            self.list_selected_players.takeItem(self.list_selected_players.row(item))
            self.list_available_players.addItem(item.text())

            self.list_selected_players.sortItems()
            self.list_available_players.sortItems()


    def create_match(self, name) :
        """Create a new Match record in the database with format as specified in project spec.
        """
        _attributes = {    
            ## Player's Name
            1 : "PLAYER TEXT PRIMARY KEY,",
            ## 
            2 : "SCORED INTEGER NOT NULL,",
            ## 
            3 : "FACED INTEGER NOT NULL,",
            ## 
            4 : "FOURS INTEGER NOT NULL,",
            ## 
            5 : "SIXES INTEGER NOT NULL,",
            ## 
            6 : "BOWLED INTEGER NOT NULL,",
            ## 
            7 : "MAIDEN INTEGER NOT NULL,",
            ## 
            8 : "GIVEN INTEGER NOT NULL,",
            ## 
            9 : "WICKETS INTEGER NOT NULL,",
            ## 
            10 : "CATCHES INTEGER NOT NULL,",
            ## 
            11 : "STUMPING INTEGER NOT NULL,",
            ## 
            12 : "RUNOUT INTEGER NOT NULL"
        }
        sql.create_table(CONNECTION, name, _attributes)


        _fields = "(PLAYER, SCORED, FACED, FOURS, SIXES, BOWLED, MAIDEN, GIVEN, WICKETS, CATCHES, STUMPING, RUNOUT)"
        _values = ""

        ## Create random values according to the category each player is in.
        for _batsman in BAT :
            _scored = random.randint(12,150)
            _faced = random.randint(20,80)
            _fours = random.randint(0,_scored//8) ## max. is half of the score divided by 4
            _sixes = random.randint(0,_scored//12)    ## max. is half of the score divided by 6
            _bowled = 0
            _maiden = 0
            _given = 0
            _wickets = 0
            _catches = random.randint(0,3)
            _stumping = 0
            _runout = random.randint(0,1)

            _values += f"""
            ("{_batsman}", {_scored}, {_faced}, {_fours}, {_sixes}, {_bowled}, {_maiden}, {_given}, {_wickets}, {_catches}, {_stumping}, {_runout}),
            """

        for _bowler in BOW :
            _scored = random.randint(0,20)
            _faced = random.randint(10,30)
            _fours = random.randint(0,2)
            _sixes = 0
            _bowled = random.randrange(54,61,6)    ## min. 9 overs, max. 10 overs.
            _maiden = random.randint(0,_bowled//6-5) ## max. 4-5 overs.
            _given = random.randint(20,50)
            _wickets = random.randint(1,6)
            _catches = random.randint(0,2)
            _stumping = 0
            _runout = random.randint(0,1)

            _values += f"""
            ("{_bowler}", {_scored}, {_faced}, {_fours}, {_sixes}, {_bowled}, {_maiden}, {_given}, {_wickets}, {_catches}, {_stumping}, {_runout}),
            """

        for _all_rounder in AR :
            _scored = random.randint(5,45)
            _faced = random.randint(10,60)
            _fours = random.randint(0,_scored//8) ## max. is half of the score divided by 4
            _sixes = random.randint(0,_scored//12)    ## max. is half of the score divided by 6
            _bowled = random.randrange(24,61,6)    ## min. 4 overs, max. 10 overs.
            _maiden = random.randint(0,_bowled//6-1)
            _given = random.randint(30,60)
            _wickets = random.randint(0,6)
            _catches = random.randint(0,3)
            _stumping = 0
            _runout = random.randint(0,2)

            _values += f"""
            ("{_all_rounder}", {_scored}, {_faced}, {_fours}, {_sixes}, {_bowled}, {_maiden}, {_given}, {_wickets}, {_catches}, {_stumping}, {_runout}),
            """

        for _wicket_keeper in WK :
            _scored = random.randint(30,60)
            _faced = random.randint(40,50)
            _fours = random.randint(0,_scored//8) ## max. is half of the score divided by 4
            _sixes = random.randint(0,_scored//12)    ## max. is half of the score divided by 6
            _bowled = 0
            _maiden = 0
            _given = 0
            _wickets = 0
            _catches = random.randint(0,3)
            _stumping = random.randint(1,3)
            _runout = random.randint(1,2)

            _values += f"""
            ("{_wicket_keeper}", {_scored}, {_faced}, {_fours}, {_sixes}, {_bowled}, {_maiden}, {_given}, {_wickets}, {_catches}, {_stumping}, {_runout}),\n"""

        _values = _values.rstrip(",\n")

        sql.create_record(CONNECTION, name, _fields, _values)

        ## Add the match name to evaluate_team_window match comboBox.
        self.ui.add_match(name)


    def custom_database(self) :
        """Create the custom database as given in the Assignment Specification.
        """

        _attributes = {    
            ## Player's Name
            1 : "NAME TEXT PRIMARY KEY,",
            ## 
            2 : "VALUE INTEGER NOT NULL,",
            ## 
            3 : "MATCHES INTEGER NOT NULL,",
            ## 
            4 : "RUNS INTEGER NOT NULL,",
            ## 
            5 : "CENTURY INTEGER NOT NULL,",
            ## 
            6 : "HALF_CENTURY INTEGER NOT NULL,",
            ## 
            7 : "CATEGORY INTEGER NOT NULL"
        }
        sql.create_table(CONNECTION, "Stats", _attributes)

        _fields = "(NAME, VALUE, MATCHES, RUNS, CENTURY, HALF_CENTURY, CATEGORY)"
        _values = """
        ("Virat Kohli", 120, 189, 8257, 28, 43, "BAT"),
        ("Yuvraj Singh", 100, 86, 3589, 10, 21, "BAT"),
        ("Ajinkya Rahane", 100, 158, 5435, 11, 31, "BAT"),
        ("Shikhar Dhawan", 85, 25, 565, 2, 1, "BAT"),
        ("Rohit Sharma", 85, 304, 8701, 14, 52, "BAT"),
        ("Umesh Yadav", 110, 296, 9496, 10, 64, "BOW"),
        ("Jasprit Bumrah", 60, 73, 1365, 0, 8, "BOW"),
        ("Bhuvneshwar Kumar", 75, 17, 289, 0, 2, "BOW"),
        ("Hardik Pandya", 75, 70, 77, 0, 0, "AR"),
        ("Ravindra Jadeja", 85, 16, 1, 0, 0, "AR"),
        ("Kedar Jadhav", 90, 111, 675, 0, 1, "AR"),
        ("Ravichandran Ashwin", 100, 136, 1914, 0, 10, "AR"),
        ("M.S. Dhoni", 75, 78, 2573, 3, 19, "WK"),
        ("Dinesh Kartik", 75, 11, 111, 0, 0, "WK")
        """
        sql.create_record(CONNECTION, "Stats", _fields, _values)

        self.ui.comboBox_match.clear()  ## Clear before adding all.
        for _match in MATCHES :
            self.create_match(_match)


    def calculate_team_match_score(self) :
        """Calculate the total score of the selected team & its players for a selected match.
        Display the same in evaluate_team_window.
        """
        ## Reset listWidgets
        self.ui.listWidget_players.clear()
        self.ui.listWidget_points.clear()

        _match = self.ui.comboBox_match.currentText()
        _team = self.ui.comboBox_team.currentText()

        _get_team_details = f"""
        SELECT
            *
        FROM
            {_team}
        """
        _records = sql.execute_read_query(CONNECTION, _get_team_details)

        _team_score = 0
        for _record in _records :
            _player, _role, _value = _record

            self.ui.listWidget_players.addItem(_player)
            _score = self.calculate_player_score(_match, _player)
            self.ui.listWidget_points.addItem(str(_score))

            _team_score += _score

        self.ui.lab_points.setText(str(_team_score))

        self.ui.listWidget_players.setCurrentRow(0)
        self.ui.listWidget_points.setCurrentRow(0)


    def calculate_player_score(self, match, name) :
        """Calculate score of the player as per the Rules.

        Based on the performance parameters mentioned by the Rules, we shall score the player.
        Rules are as follows:-
        Batting
        => 1 point for 2 runs scored
        => Additional 5 points for half century
        => Additional 10 points for century
        => 2 points for strike rate (runs/balls faced) of 80-100
        => Additional 4 points for strike rate>100
        => 1 point for hitting a boundary (four) and 2 points for over boundary (six)
        Bowling
        => 10 points for each wicket
        => Additional 5 points for three wickets per innings
        => Additional 10 points for 5 wickets or more in innings
        => 4 points for economy rate (runs given per over) between 3.5 and 4.5
        => 7 points for economy rate between 2 and 3.5
        => 10 points for economy rate less than 2
        Fielding
        => 10 points each for catch/stumping/run out
        """
        _get_player_stats = f"""
        SELECT
            *
        FROM
            {match}
        WHERE
            PLAYER = "{name}"
        """

        _records = sql.execute_read_query(CONNECTION, _get_player_stats)[0]

        _player, _scored, _faced, _fours, _sixes, _bowled, _maiden, _given, _wickets, _catches, _stumping, _runout = _records

        _points = 0
        ## Batting
        ## 1 point for each 2 runs scored
        _points += 1 * _scored // 2
        ## Additional 5 points for half century
        _points += 5 if _scored >= 50 else 0
        ## Additional 10 points for century
        _points += 10 if _scored >= 100 else 0
        ## 2 points for strike rate (runs/balls faced) of 80-100
        _points += 2 if 80 <= _scored/_faced * 100 < 100 else 0
        ## Additional 4 points for strike rate>100
        _points += 4 if 100 <= _scored/_faced * 100 else 0
        ## 1 point for hitting a boundary (four) and 2 points for over boundary (six)
        _points += 1 * _fours + 2 * _sixes

        ## Bowling
        ## 10 points for each wicket
        _points += 10 * _wickets
        ## Additional 5 points for three wickets per innings
        _points += 5 if _wickets >= 3 else 0
        ## Additional 10 points for 5 wickets or more in innings
        _points += 10 if _wickets >= 5 else 0

        ## overs = bowled / 6. To avoid ZeroDivisionError we need a check.
        _eco_rate = _given/(_bowled/6) if _bowled > 0 else 0

        ## 4 points for economy rate (runs given per over) between 3.5 and 4.5
        _points += 4 if 3.5 < _eco_rate <= 4.5 else 0
        ## 7 points for economy rate between 2 and 3.5
        _points += 7 if 2 < _eco_rate <= 3.5 else 0
        ## 10 points for economy rate less than 2
        _points += 10 if _eco_rate <= 2 else 0

        ## Fielding
        ## 10 points each for catch/stumping/run out
        _points += 10 * _catches
        _points += 10 * _stumping
        _points += 10 * _runout

        return _points


    def get_player_value(self, name) :
        """Get the player's value from the players' Stats database stored at the beginning.

        Value of the player is how many points have to be spent when we have to add the player 
        to our team.
        """
        _get_player_value = f"""
        SELECT
            VALUE
        FROM
            Stats
        WHERE
            NAME = "{name}"
        """
        ## We need to index twice as the return value is a list of tuples.
        ## Strangely even when REPLACE INTO is used, there are multiple entries seen for
        ## record of each player. Hence, there are multiple tuples.
        return(sql.execute_read_query(CONNECTION, _get_player_value)[0][0])


    def check_team_existence(self) :
        ## Check whether a sqlite3 table exists with the team name mentioned or not.
        ## If not exists, then we shall initialise variables as if for a new team.
        _find_team = f"""
        SELECT
            name
        FROM
            sqlite_master
        WHERE
            type = "table"
        AND
            name = "{self._team_name}"
        """
        _exists = sql.execute_read_query(CONNECTION, _find_team)
        if _exists != [] :
            return True
        else :
            return False


    def message_box(self, message, kind) :
        _msg_box = QtWidgets.QMessageBox()
        if kind == "Error" :
            _msg_box.setWindowTitle("ERROR!")
            _msg_box.setIcon(QtWidgets.QMessageBox.Critical)
        elif kind == "Info" :
            _msg_box.setWindowTitle("INFO")
            _msg_box.setIcon(QtWidgets.QMessageBox.Information)
        _msg_box.setText(message)
        _msg_box.setStandardButtons(QtWidgets.QMessageBox.Ok)

        _msg_box.exec_()


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()

    ## Custom tasks to be called only once in the beginning.
    ui.custom_database() ## To create the databases of players Stats and Match details.

    sys.exit(app.exec_())

